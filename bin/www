#!/usr/bin/env node

const path = require('path')
const http = require('http')
const cluster = require('cluster')

require('dotenv').config({ path: path.resolve(__dirname, '../.env') })

const config = require('../server/config')
const app = require('../app')
const db = require('../server/db')
const logger = require('../server/util/logger')

const port = parseInt(process.env.PORT, 10) || 8000

app.set('port', port)

const shutDown = signal => {
  if (!cluster.isMaster) {
    return
  }

  logger.log('shutting down hydrusrv...')

  let exitCode = 0

  const promises = []
  const workerIds = Object.keys(cluster.workers)

  for (const id of workerIds) {
    const worker = cluster.workers[id]

    promises.push(new Promise(resolve => {
      let resolved = false

      worker.once('exit', () => {
        if (resolved) {
          return
        }

        resolved = true

        resolve()
      })

      setTimeout(() => {
        if (resolved) {
          return
        }

        resolved = true

        logger.log('could not close worker in time, killing it.', 'error')

        worker.kill(signal)

        exitCode = 1

        resolve()
      }, 4000)
    }))

    worker.send('shutdown')
    worker.disconnect()
  }

  Promise.all(promises).then(() => {
    setTimeout(() => {
      logger.log(
        'could not close master db connection in time, killing it.', 'error'
      )

      exitCode = 1

      process.exit(exitCode)
    }, 4000)

    db.close()

    process.exit(exitCode)
  })
}

if (cluster.isMaster) {
  logger.log('starting hydrusrv...')

  const numberOfWorkers = config.numberOfWorkers > 1
    ? config.numberOfWorkers
    : 1

  for (let i = 0; i < numberOfWorkers; i++) {
    cluster.fork()
  }

  cluster.on('exit', worker => {
    cluster.fork()
  })

  db.connect()
  db.vacuumAuthenticationDb()
  db.setAuthenticationDbCheckpointInterval()

  logger.log('hydrusrv is ready.')
} else {
  const server = http.createServer(app)

  server.listen(port)

  process.on('message', message => {
    if (message === 'shutdown') {
      app.shutDown(server)
    }
  })
}

process.on('SIGTERM', () => {
  shutDown('SIGTERM')
})

process.on('SIGINT', () => {
  shutDown('SIGINT')
})
